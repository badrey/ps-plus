// flow-typed signature: f8e317619748b0239a4db9249442725d
// flow-typed version: <<STUB>>/eslint-plugin-unicorn_v21.0.0/flow_v0.133.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'eslint-plugin-unicorn'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module 'eslint-plugin-unicorn' {
  declare module.exports: any;
}

/**
 * We include stubs for each file inside this npm package in case you need to
 * require those files directly. Feel free to delete any files that aren't
 * needed.
 */
declare module 'eslint-plugin-unicorn/rules/better-regex' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/catch-error-name' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/consistent-function-scoping' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/custom-error-definition' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/error-message' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/escape-case' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/expiring-todo-comments' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/explicit-length-check' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/filename-case' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/import-index' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/new-for-builtins' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-abusive-eslint-disable' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-array-instanceof' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-console-spaces' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-fn-reference-in-iterator' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-for-loop' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-hex-escape' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-keyword-prefix' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-nested-ternary' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-new-buffer' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-null' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-object-as-default-parameter' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-process-exit' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-reduce' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-unreadable-array-destructuring' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-unsafe-regex' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-unused-properties' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-useless-undefined' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/no-zero-fractions' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/number-literal-case' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-add-event-listener' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-array-find' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-dataset' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-event-key' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-exponentiation-operator' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-flat-map' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-includes' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-modern-dom-apis' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-negative-index' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-node-append' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-node-remove' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-number-properties' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-optional-catch-binding' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-query-selector' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-reflect-apply' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-replace-all' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-set-has' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-spread' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-starts-ends-with' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-string-slice' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-text-content' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-trim-start-end' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prefer-type-error' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/prevent-abbreviations' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/regex-shorthand' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/string-content' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/throw-new-error' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/avoid-capture' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/builtins' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/cartesian-product-samples' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/escape-template-element-raw' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/get-documentation-url' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/get-references' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/get-variable-identifiers' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-assignment-pattern-shorthand-property-identifier' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-literal-value' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-method-named' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-object-method' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-same-node' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-shadowed' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-shorthand-export-identifier' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-shorthand-import-identifier' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-shorthand-property-identifier' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-valid-variable-name' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/is-value-not-usable' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/method-selector' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/needs-semicolon' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/not-dom-node' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/not-function' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/quote-string' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/rename-identifier' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/rename-variable' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/replace-string-raw' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/replace-template-element' {
  declare module.exports: any;
}

declare module 'eslint-plugin-unicorn/rules/utils/resolve-variable-name' {
  declare module.exports: any;
}

// Filename aliases
declare module 'eslint-plugin-unicorn/index' {
  declare module.exports: $Exports<'eslint-plugin-unicorn'>;
}
declare module 'eslint-plugin-unicorn/index.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn'>;
}
declare module 'eslint-plugin-unicorn/rules/better-regex.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/better-regex'>;
}
declare module 'eslint-plugin-unicorn/rules/catch-error-name.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/catch-error-name'>;
}
declare module 'eslint-plugin-unicorn/rules/consistent-function-scoping.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/consistent-function-scoping'>;
}
declare module 'eslint-plugin-unicorn/rules/custom-error-definition.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/custom-error-definition'>;
}
declare module 'eslint-plugin-unicorn/rules/error-message.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/error-message'>;
}
declare module 'eslint-plugin-unicorn/rules/escape-case.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/escape-case'>;
}
declare module 'eslint-plugin-unicorn/rules/expiring-todo-comments.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/expiring-todo-comments'>;
}
declare module 'eslint-plugin-unicorn/rules/explicit-length-check.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/explicit-length-check'>;
}
declare module 'eslint-plugin-unicorn/rules/filename-case.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/filename-case'>;
}
declare module 'eslint-plugin-unicorn/rules/import-index.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/import-index'>;
}
declare module 'eslint-plugin-unicorn/rules/new-for-builtins.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/new-for-builtins'>;
}
declare module 'eslint-plugin-unicorn/rules/no-abusive-eslint-disable.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-abusive-eslint-disable'>;
}
declare module 'eslint-plugin-unicorn/rules/no-array-instanceof.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-array-instanceof'>;
}
declare module 'eslint-plugin-unicorn/rules/no-console-spaces.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-console-spaces'>;
}
declare module 'eslint-plugin-unicorn/rules/no-fn-reference-in-iterator.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-fn-reference-in-iterator'>;
}
declare module 'eslint-plugin-unicorn/rules/no-for-loop.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-for-loop'>;
}
declare module 'eslint-plugin-unicorn/rules/no-hex-escape.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-hex-escape'>;
}
declare module 'eslint-plugin-unicorn/rules/no-keyword-prefix.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-keyword-prefix'>;
}
declare module 'eslint-plugin-unicorn/rules/no-nested-ternary.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-nested-ternary'>;
}
declare module 'eslint-plugin-unicorn/rules/no-new-buffer.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-new-buffer'>;
}
declare module 'eslint-plugin-unicorn/rules/no-null.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-null'>;
}
declare module 'eslint-plugin-unicorn/rules/no-object-as-default-parameter.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-object-as-default-parameter'>;
}
declare module 'eslint-plugin-unicorn/rules/no-process-exit.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-process-exit'>;
}
declare module 'eslint-plugin-unicorn/rules/no-reduce.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-reduce'>;
}
declare module 'eslint-plugin-unicorn/rules/no-unreadable-array-destructuring.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-unreadable-array-destructuring'>;
}
declare module 'eslint-plugin-unicorn/rules/no-unsafe-regex.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-unsafe-regex'>;
}
declare module 'eslint-plugin-unicorn/rules/no-unused-properties.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-unused-properties'>;
}
declare module 'eslint-plugin-unicorn/rules/no-useless-undefined.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-useless-undefined'>;
}
declare module 'eslint-plugin-unicorn/rules/no-zero-fractions.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/no-zero-fractions'>;
}
declare module 'eslint-plugin-unicorn/rules/number-literal-case.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/number-literal-case'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-add-event-listener.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-add-event-listener'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-array-find.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-array-find'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-dataset.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-dataset'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-event-key.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-event-key'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-exponentiation-operator.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-exponentiation-operator'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-flat-map.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-flat-map'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-includes.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-includes'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-modern-dom-apis.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-modern-dom-apis'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-negative-index.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-negative-index'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-node-append.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-node-append'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-node-remove.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-node-remove'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-number-properties.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-number-properties'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-optional-catch-binding.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-optional-catch-binding'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-query-selector.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-query-selector'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-reflect-apply.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-reflect-apply'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-replace-all.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-replace-all'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-set-has.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-set-has'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-spread.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-spread'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-starts-ends-with.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-starts-ends-with'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-string-slice.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-string-slice'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-text-content.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-text-content'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-trim-start-end.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-trim-start-end'>;
}
declare module 'eslint-plugin-unicorn/rules/prefer-type-error.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prefer-type-error'>;
}
declare module 'eslint-plugin-unicorn/rules/prevent-abbreviations.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/prevent-abbreviations'>;
}
declare module 'eslint-plugin-unicorn/rules/regex-shorthand.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/regex-shorthand'>;
}
declare module 'eslint-plugin-unicorn/rules/string-content.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/string-content'>;
}
declare module 'eslint-plugin-unicorn/rules/throw-new-error.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/throw-new-error'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/avoid-capture.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/avoid-capture'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/builtins.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/builtins'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/cartesian-product-samples.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/cartesian-product-samples'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/escape-template-element-raw.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/escape-template-element-raw'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/get-documentation-url.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/get-documentation-url'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/get-references.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/get-references'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/get-variable-identifiers.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/get-variable-identifiers'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-assignment-pattern-shorthand-property-identifier.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-assignment-pattern-shorthand-property-identifier'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-literal-value.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-literal-value'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-method-named.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-method-named'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-object-method.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-object-method'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-same-node.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-same-node'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-shadowed.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-shadowed'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-shorthand-export-identifier.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-shorthand-export-identifier'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-shorthand-import-identifier.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-shorthand-import-identifier'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-shorthand-property-identifier.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-shorthand-property-identifier'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-valid-variable-name.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-valid-variable-name'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/is-value-not-usable.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/is-value-not-usable'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/method-selector.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/method-selector'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/needs-semicolon.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/needs-semicolon'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/not-dom-node.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/not-dom-node'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/not-function.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/not-function'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/quote-string.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/quote-string'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/rename-identifier.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/rename-identifier'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/rename-variable.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/rename-variable'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/replace-string-raw.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/replace-string-raw'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/replace-template-element.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/replace-template-element'>;
}
declare module 'eslint-plugin-unicorn/rules/utils/resolve-variable-name.js' {
  declare module.exports: $Exports<'eslint-plugin-unicorn/rules/utils/resolve-variable-name'>;
}
